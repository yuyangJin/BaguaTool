#include <iostream>
#include <fstream>
#include <mpi.h>
#include <papi.h>
using namespace std;
// these macros can be used for colorful output
#define TPRT_NOCOLOR "\033[0m"
#define TPRT_RED "\033[1;31m"
#define TPRT_GREEN "\033[1;32m"
#define TPRT_YELLOW "\033[1;33m"
#define TPRT_BLUE "\033[1;34m"
#define TPRT_MAGENTA "\033[1;35m"
#define TPRT_CYAN "\033[1;36m"
#define TPRT_REVERSE "\033[7m"

#define LOG_INFO(fmt, ...) fprintf(stderr,TPRT_GREEN fmt TPRT_NOCOLOR, __VA_ARGS__);
#define LOG_ERROR(fmt, ...) fprintf(stderr,TPRT_RED fmt TPRT_NOCOLOR, __VA_ARGS__);
#define LOG_WARN(fmt, ...) fprintf(stderr,TPRT_MAGENTA fmt TPRT_NOCOLOR, __VA_ARGS__);
#define LOG_LINE fprintf(stderr,TPRT_BLUE "line=%d\n" TPRT_NOCOLOR, __LINE__);
//

#define TRY(func, flag) \
{ \
        int retval = func;\
        if (retval != flag) LOG_ERROR("%s, ErrCode: %d\n", #func, retval);\
}


#define NUM_EVENTS 1

long long int pmu_start_count = 0;
long long int pmu_start_count_1 = 0;
long long int pmu_start_count_2 = 0;
long long int pmu_start_count_3 = 0;
long long int total_pmu_count = 0;
long long int total_pmu_count_1 = 0;
long long int total_pmu_count_2 = 0;
long long int total_pmu_count_3 = 0;


int EventCode[NUM_EVENTS] = {PAPI_TOT_INS};//,PAPI_TOT_CYC,PAPI_L2_DCM};
//unsigned int EventCode[NUM_EVENTS] = {PAPI_L2_DCM,PAPI_L3_DCA};
long long int values[NUM_EVENTS];
int EventSet = PAPI_NULL;
int i = 0;


int counter = 0, rank = 0;
bool flag = true;
void code_to_inject_entry(){
  if (flag){
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    flag = false;
     int num;//EventSet = PAPI_NULL;
        //Initialize the PAPI library 
        int retval = PAPI_library_init(PAPI_VER_CURRENT);
        if (retval != PAPI_VER_CURRENT) {
                fprintf(stderr, "PAPI library init error!\n");
                //exit(1);
        }
        if ((num = PAPI_get_opt(PAPI_MAX_HWCTRS,NULL)) <= 0){
                LOG_ERROR("Failed to get counter number %d \n",num);
        }
        LOG_INFO("Counter number:%d\n",num);
        TRY(PAPI_create_eventset(&EventSet), PAPI_OK);
        TRY(PAPI_add_events(EventSet, EventCode, NUM_EVENTS), PAPI_OK);
        TRY(PAPI_start(EventSet), PAPI_OK);
        
  }
  TRY(PAPI_read(EventSet,values),PAPI_OK);
        pmu_start_count = values[0];
        //pmu_start_count_1 = values[1];
        //pmu_start_count_2 = values[2];
        //pmu_start_count_3 = values[3];
  //counter ++;
  //  std::cout<<"This code is injected"<<std::endl;
}

void code_to_inject_exit(){
  // ..
  TRY(PAPI_read(EventSet,values),PAPI_OK);
        //LOG_INFO("end TOT_INS = %lld\n",values[0]);
        //LOG_INFO("TOT_INS = %lld\n",values[0]-pmu_start_count);
        total_pmu_count += values[0]-pmu_start_count;
        //total_pmu_count_1 += values[1]-pmu_start_count_1;
        //total_pmu_count_2 += values[2]-pmu_start_count_2;
        //total_pmu_count_3 += values[3]-pmu_start_count_3;
}

void print_at_prog_exit(){
  //cout<<"counter = "<< counter <<endl;
  //int rank = 0;
  //MPI_Init(NULL,NULL);
  //MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  //LOG_INFO("[Rank %d] instrumented function is invoked %d times\n", rank, counter)
  //MPI_Finalize();

  LOG_INFO("Rank: %d TOT_INS = %lld, TOT_CYC = %lld, TOT_LST = %lld, L2_DCM = %lld \n",rank,total_pmu_count,total_pmu_count_1,total_pmu_count_2, total_pmu_count_3);

}

